#version 430 core

layout (local_size_x = 8, local_size_y = 8) in;
layout (rg32f, binding = 0) uniform readonly image2D distancesIterationsTexture1;
layout (rg32f, binding = 1) uniform writeonly image2D distancesIterationsTexture2;
layout (rgba32f, binding = 2) uniform readonly image2D precomputedConesTexture;


uniform mat4 u_inv_view_mat;
uniform vec3 u_position;
uniform uint u_width;
uniform uint u_height;

uniform float u_time_in_seconds;
uniform float u_epsilon;
uniform float u_max_distance;
uniform float u_max_iteration_count;

uniform bool u_first_pass;


#define NEWTONS_CRADLE 0
#define CAR 1
#define TEMPLE 2

#define SDF_SCENE @SDF_SCENE@


#include "assets/sdf.include"


struct Ray {
    vec3 position;
    vec3 direction;
};



vec2 cone_tracing(Ray ray, float initial_t, float initial_iteration, float cone_scale) {
    float t = initial_t;

    float d;
    float step_size = u_epsilon;

    float steps = initial_iteration;
    do {
        vec3 current_position = ray.position + t * ray.direction;
        d = abs(sdf(current_position).d);
        step_size = d - cone_scale * t;
        if (step_size < u_epsilon) {
            break;
        }
        t += step_size;
        steps += 1.0;
    } while (t < u_max_distance && steps < u_max_iteration_count);

    if (step_size < u_epsilon) {
        return vec2(t, steps);
    } else if (t >= u_max_distance) {
        return vec2(u_max_distance, steps);
    } else {
        // iteration count exceeded
        return vec2(t, u_max_iteration_count);
    }
}

void main() {
    if (gl_GlobalInvocationID.x >= u_width || gl_GlobalInvocationID.y >= u_height) {
        return;
    }

    vec4 precomputed = imageLoad(precomputedConesTexture, ivec2(gl_GlobalInvocationID.xy));

    vec4 ray_target = u_inv_view_mat * vec4(precomputed.xyz, 1.0);
    vec3 ray_dir = normalize(ray_target.xyz - u_position);
    
    float cone_scale = precomputed.w;

    float initial_t = 0.0;
    float initial_iteration = 0.0;
    if (!u_first_pass) {
        vec4 initial = imageLoad(distancesIterationsTexture1, ivec2(gl_GlobalInvocationID.xy / 2));

        initial_t = initial.r;
        initial_iteration = initial.g * 0.25;

        if (initial_t >= u_max_distance || initial_iteration >= u_max_iteration_count) {
            imageStore(distancesIterationsTexture2, ivec2(gl_GlobalInvocationID.xy), vec4(initial_t, initial_iteration, 0.0, 0.0));
            return;
        }
    }

    vec2 res = cone_tracing(Ray(u_position, ray_dir), initial_t, initial_iteration, cone_scale);

    imageStore(distancesIterationsTexture2, ivec2(gl_GlobalInvocationID.xy), vec4(res.x, res.y, 0.0, 0.0));
}