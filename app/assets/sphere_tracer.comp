#version 430 core

layout (local_size_x = 8, local_size_y = 8) in;
layout (rgba32f, binding = 0) uniform writeonly image2D outputTexture;

uniform samplerCube u_skyboxTexture;

uniform mat4 u_inv_view_proj_mat;
uniform vec3 u_position;
uniform uint u_width;
uniform uint u_height;

uniform float u_time_in_seconds;
uniform float u_epsilon;
uniform float u_max_distance;
uniform uint u_max_iteration_count;


const uint NAIVE = 0;
const uint RELAXED = 1;
const uint ENHANCED = 2;

const uint RENDER_MODE = @RENDER_MODE@;
const bool SHOW_ITERATIONS = @SHOW_ITERATIONS@;


#include "assets/sdf.include"


struct Ray {
    vec3 position;
    vec3 direction;
};



vec3 naive_sphere_tracing(Ray ray) {
    float t = 0.0;
    float d;

    uint steps = 0;
    do {
        vec3 current_position = ray.position + t * ray.direction;
        d = abs(sdf(current_position).d);
        t += d;
        steps++;
    } while (d > u_epsilon * t && t < u_max_distance && steps < u_max_iteration_count);


    if (SHOW_ITERATIONS) {
        return vec3(float(steps) / float(u_max_iteration_count));
    } else {
        if (d <= u_epsilon * t) {
            vec3 position = ray.position + t * ray.direction;
            vec3 normal = Normal(position);
            float dif = clamp(dot(normal, vec3(0.57703)), 0.0, 1.0);
            float amb = 0.5 + 0.5 * dot(normal, vec3(0.0, 1.0, 0.0));
            vec3 color = vec3(0.2, 0.3, 0.4) * amb + vec3(0.8, 0.7, 0.5) * dif;
            return color;
        } else if (t >= u_max_distance){
            return texture(u_skyboxTexture, ray.direction).rgb;
        } else {
            return vec3(1.0, 0.0, 0.0);
        }
    }
}

vec3 relaxed_sphere_tracing(Ray ray) {
    const float w = 1.6;

    float next_d;
    float next_t = 0.0;

    float d = 0.0;
    float t = 0.0;

    uint steps = 0;

    do {
        next_d = abs(sdf(ray.position + next_t * ray.direction).d);
        steps++;

        if ((d + next_d) < w * d && next_t > (t + d)) {
            next_t = t + d;
        } else {
            t = next_t;
            d = next_d;

            next_t = next_t + w * next_d;
        }
    } while (d > u_epsilon * t && t < u_max_distance && steps < u_max_iteration_count);
 

    if (SHOW_ITERATIONS) {
        return vec3(float(steps) / float(u_max_iteration_count));
    } else {
        if (d <= u_epsilon * t) {
            vec3 position = ray.position + t * ray.direction;
            vec3 normal = Normal(position);
            float dif = clamp(dot(normal, vec3(0.57703)), 0.0, 1.0);
            float amb = 0.5 + 0.5 * dot(normal, vec3(0.0, 1.0, 0.0));
            vec3 color = vec3(0.2, 0.3, 0.4) * amb + vec3(0.8, 0.7, 0.5) * dif;
            return color;
        } else if (t >= u_max_distance){
            return texture(u_skyboxTexture, ray.direction).rgb;
        } else {
            return vec3(1.0, 0.0, 0.0);
        }
    }
}

vec3 enhanced_sphere_tracing(Ray ray) {
    const float w = 0.9;
    const float m = 10.0;

    float next_d;
    float next_t = 0.0;

    float d = 0.0;
    float t = 0.0;

    float s = 0.0;
    float next_s = 0.0;

    uint steps = 0;

    do {
        next_d = abs(sdf(ray.position + next_t * ray.direction).d);
        steps++;

        if ((d + next_d + 0.000001) < next_s && next_t > (t + d)) {
            next_s = d;

            s = next_s;

            next_t = t + next_s;
        } else {
            next_s = next_d + w * next_d * ((-1.0 * d + next_d + s) / (d - next_d + s));
            next_s = clamp(next_s, next_d, m * next_d);
            
            t = next_t;
            d = next_d;
            
            s = next_s;

            next_t = next_t + next_s;
        }
    } while (d > u_epsilon * t && t < u_max_distance && steps < u_max_iteration_count);


    if (SHOW_ITERATIONS) {
        return vec3(float(steps) / float(u_max_iteration_count));
    } else {
        if (d <= u_epsilon * t) {
            vec3 position = ray.position + t * ray.direction;
            vec3 normal = Normal(position);
            float dif = clamp(dot(normal, vec3(0.57703)), 0.0, 1.0);
            float amb = 0.5 + 0.5 * dot(normal, vec3(0.0, 1.0, 0.0));
            vec3 color = vec3(0.2, 0.3, 0.4) * amb + vec3(0.8, 0.7, 0.5) * dif;
            return color;
        } else if (t >= u_max_distance){
            return texture(u_skyboxTexture, ray.direction).rgb;
        } else {
            return vec3(1.0, 0.0, 0.0);                                                                                                                                                                                                                                                                                                                                                                                            
        }
    }
}

void main() {
    if (gl_GlobalInvocationID.x >= u_width || gl_GlobalInvocationID.y >= u_height) {
        return;
    }

    vec2 normalized_pixel_coord = vec2(gl_GlobalInvocationID.xy) / vec2(u_width, u_height);
    vec2 ndc_coord = normalized_pixel_coord * 2.0 - 1.0 + (1.0 / float(u_height));
    vec4 projected_position = u_inv_view_proj_mat * vec4(ndc_coord, -1.0, 1.0);
    projected_position /= projected_position.w;
    vec3 ray_dir = normalize(projected_position.xyz - u_position);

    vec3 res;
    switch (RENDER_MODE) {
        case NAIVE: res = naive_sphere_tracing(Ray(u_position, ray_dir)); break;
        case RELAXED: res = relaxed_sphere_tracing(Ray(u_position, ray_dir)); break;
        case ENHANCED: res = enhanced_sphere_tracing(Ray(u_position, ray_dir)); break;
    }

    imageStore(outputTexture, ivec2(gl_GlobalInvocationID.xy), vec4(res, 1.0));
}