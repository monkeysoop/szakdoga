#version 430 core

layout (local_size_x = 8, local_size_y = 8) in;
layout (rgba32f, binding = 0) uniform writeonly image2D outputTexture;
layout (rg32f, binding = 1) uniform readonly image2D distancesIterationsTexture;

uniform samplerCube u_skyboxTexture;

uniform mat4 u_inv_view_proj_mat;
uniform vec3 u_position;
uniform uint u_width;
uniform uint u_height;

uniform float u_time_in_seconds;
uniform float u_epsilon;
uniform float u_max_distance;
uniform float u_max_iteration_count;

uniform float u_relaxed_step_multiplier;
uniform float u_enhanced_step_multiplier;
uniform float u_enhanced_max_step_factor;

uniform float u_shadow_penumbra;
uniform float u_shadow_intensity;
uniform float u_shadow_max_iteration_count;
uniform float u_ao_multiplier_attenuation;
uniform float u_ao_step_size;
uniform float u_ao_strength;
uniform float u_ao_max_iteration_count;
uniform float u_ambient_strength;
uniform float u_reflection_attenuation;

uniform uint u_max_number_of_reflections;

uniform bool u_first_pass;


#define NEWTONS_CRADLE 0
#define CAR 1
#define TEMPLE 2
#define PRIMITIVES 3

#define NORMAL 0
#define ITERATION_COUNT 1
#define SDF_CALL_COUNT 2
#define DEBUG 3
#define DEBUG_ITERATION_COUNT 4
#define DEBUG_DEPTH 5

#define NAIVE 0
#define RELAXED 1
#define ENHANCED 2

#define SDF_SCENE @SDF_SCENE@
#define RENDER_MODE @RENDER_MODE@
#define SPHERE_TRACING_TYPE @SPHERE_TRACING_TYPE@


#include "assets/renderer.include"
#include "assets/ray.include"



void main() {
    if (gl_GlobalInvocationID.x >= u_width || gl_GlobalInvocationID.y >= u_height) {
        return;
    }

    vec2 normalized_pixel_coord = vec2(gl_GlobalInvocationID.xy) / vec2(u_width, u_height);
    vec2 ndc_coord = normalized_pixel_coord * 2.0 - 1.0 + (1.0 / float(u_height));
    vec4 projected_position = u_inv_view_proj_mat * vec4(ndc_coord, -1.0, 1.0);
    projected_position /= projected_position.w;
    vec3 ray_dir = normalize(projected_position.xyz - u_position);

    float initial_t = 0.0;
    float initial_iteration = 0.0;
    if (!u_first_pass) {
        vec4 initial = imageLoad(distancesIterationsTexture, ivec2(gl_GlobalInvocationID.xy / 2));

        initial_t = initial.r;
        initial_iteration = initial.g * 0.25;
    }

    vec3 color = Render(Ray(u_position, ray_dir), initial_t, initial_iteration);

    imageStore(outputTexture, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1.0));
}