#version 430 core

layout (local_size_x = 8, local_size_y = 8) in;
layout (rgba32f, binding = 0) uniform writeonly image2D outputTexture;
layout (rg32f, binding = 1) uniform readonly image2D distancesIterationsTexture;

uniform samplerCube u_skyboxTexture;

uniform mat4 u_inv_view_proj_mat;
uniform vec3 u_position;
uniform uint u_width;
uniform uint u_height;

uniform float u_time_in_seconds;
uniform float u_epsilon;
uniform float u_max_distance;
uniform float u_max_iteration_count;

uniform float u_relaxed_step_multiplier;
uniform float u_enhanced_step_multiplier;
uniform float u_enhanced_max_step_factor;

uniform bool u_first_pass;


#define NEWTONS_CRADLE 0
#define CAR 1
#define TEMPLE 2

#define NORMAL 0
#define ITERATION_COUNT 1
#define DEPTH 2

#define NAIVE 0
#define RELAXED 1
#define ENHANCED 2

#define SDF_SCENE @SDF_SCENE@
#define RENDER_MODE @RENDER_MODE@
#define SPHERE_TRACING_TYPE @SPHERE_TRACING_TYPE@


#include "assets/sdf.include"


struct Ray {
    vec3 position;
    vec3 direction;
};



vec3 naive_sphere_tracing(Ray ray, float initial_t, float initial_iteration) {
    float t = initial_t;
    float d;

    float steps = initial_iteration;
    do {
        vec3 current_position = ray.position + t * ray.direction;
        d = abs(sdf(current_position).d);
        t += d;
        steps += 1.0;
    } while (d > u_epsilon * t && t < u_max_distance && steps < u_max_iteration_count);

#if RENDER_MODE == NORMAL
    if (d <= u_epsilon * t) {
        vec3 current_position = ray.position + t * ray.direction;
        vec3 normal = Normal(current_position);
        float dif = clamp(dot(normal, vec3(0.57703)), 0.0, 1.0);
        float amb = 0.5 + 0.5 * dot(normal, vec3(0.0, 1.0, 0.0));
        vec3 color = vec3(0.2, 0.3, 0.4) * amb + vec3(0.8, 0.7, 0.5) * dif;
        return color;
    } else if (t >= u_max_distance){
        return texture(u_skyboxTexture, ray.direction).rgb;
    } else {
        return vec3(1.0, 0.0, 0.0);
    }
#elif RENDER_MODE == ITERATION_COUNT
    return vec3(steps / u_max_iteration_count);
#elif RENDER_MODE == DEPTH
    return vec3(t / u_max_distance);
#endif
}

vec3 relaxed_sphere_tracing(Ray ray, float initial_t, float initial_iteration) {
    float next_d;
    float next_t = initial_t;

    float d = 0.0;
    float t = initial_t;

    float steps = initial_iteration;

    do {
        next_d = abs(sdf(ray.position + next_t * ray.direction).d);
        steps += 1.0;

        if ((d + next_d) < u_relaxed_step_multiplier * d && next_t > (t + d)) {
            next_t = t + d;
        } else {
            t = next_t;
            d = next_d;

            next_t = next_t + u_relaxed_step_multiplier * next_d;
        }
    } while (d > u_epsilon * t && t < u_max_distance && steps < u_max_iteration_count);
 
#if RENDER_MODE == NORMAL
    if (d <= u_epsilon * t) {
        vec3 position = ray.position + t * ray.direction;
        vec3 normal = Normal(position);
        float dif = clamp(dot(normal, vec3(0.57703)), 0.0, 1.0);
        float amb = 0.5 + 0.5 * dot(normal, vec3(0.0, 1.0, 0.0));
        vec3 color = vec3(0.2, 0.3, 0.4) * amb + vec3(0.8, 0.7, 0.5) * dif;
        return color;
    } else if (t >= u_max_distance){
        return texture(u_skyboxTexture, ray.direction).rgb;
    } else {
        return vec3(1.0, 0.0, 0.0);
    }
#elif RENDER_MODE == ITERATION_COUNT
    return vec3(float(steps) / float(u_max_iteration_count));
#elif RENDER_MODE == DEPTH
    return vec3(t / u_max_distance);
#endif
}

vec3 enhanced_sphere_tracing(Ray ray, float initial_t, float initial_iteration) {
    float next_d;
    float next_t = initial_t;

    float d = 0.0;
    float t = initial_t;

    float s = 0.0;
    float next_s = 0.0;

    float steps = initial_iteration;

    do {
        next_d = abs(sdf(ray.position + next_t * ray.direction).d);
        steps += 1.0;

        if ((d + next_d + 0.000001) < next_s && next_t > (t + d)) {
            next_s = d;

            s = next_s;

            next_t = t + next_s;
        } else {
            next_s = next_d + u_enhanced_step_multiplier * next_d * ((-1.0 * d + next_d + s) / (d - next_d + s));
            next_s = clamp(next_s, next_d, u_enhanced_max_step_factor * next_d);

            t = next_t;
            d = next_d;

            s = next_s;

            next_t = next_t + next_s;
        }
    } while (d > u_epsilon * t && t < u_max_distance && steps < u_max_iteration_count);

#if RENDER_MODE == NORMAL
    if (d <= u_epsilon * t) {
        vec3 position = ray.position + t * ray.direction;
        vec3 normal = Normal(position);
        float dif = clamp(dot(normal, vec3(0.57703)), 0.0, 1.0);
        float amb = 0.5 + 0.5 * dot(normal, vec3(0.0, 1.0, 0.0));
        vec3 color = vec3(0.2, 0.3, 0.4) * amb + vec3(0.8, 0.7, 0.5) * dif;
        return color;
    } else if (t >= u_max_distance){
        return texture(u_skyboxTexture, ray.direction).rgb;
    } else {
        return vec3(1.0, 0.0, 0.0);
    }
#elif RENDER_MODE == ITERATION_COUNT
    return vec3(float(steps) / float(u_max_iteration_count));
#elif RENDER_MODE == DEPTH
    return vec3(t / u_max_distance);
#endif
}

vec3 Render(Ray ray, float initial_t, float initial_iteration) {
    if (initial_t >= u_max_distance || initial_iteration >= u_max_iteration_count) {

#if RENDER_MODE == NORMAL
        if (initial_iteration >= u_max_iteration_count) {
            return vec3(1.0, 0.0, 0.0);
        } else {
            return texture(u_skyboxTexture, ray.direction).rgb;
        }
#elif RENDER_MODE == ITERATION_COUNT
        return vec3(initial_iteration / u_max_iteration_count);
#elif RENDER_MODE == DEPTH
        return vec3(initial_t / u_max_distance);
#endif

    } else {

#if SPHERE_TRACING_TYPE == NAIVE
        return naive_sphere_tracing(ray, initial_t, initial_iteration);
#elif SPHERE_TRACING_TYPE == RELAXED
        return relaxed_sphere_tracing(ray, initial_t, initial_iteration);
#elif SPHERE_TRACING_TYPE == ENHANCED
        return enhanced_sphere_tracing(ray, initial_t, initial_iteration);
#endif

    }
}

void main() {
    if (gl_GlobalInvocationID.x >= u_width || gl_GlobalInvocationID.y >= u_height) {
        return;
    }

    vec2 normalized_pixel_coord = vec2(gl_GlobalInvocationID.xy) / vec2(u_width, u_height);
    vec2 ndc_coord = normalized_pixel_coord * 2.0 - 1.0 + (1.0 / float(u_height));
    vec4 projected_position = u_inv_view_proj_mat * vec4(ndc_coord, -1.0, 1.0);
    projected_position /= projected_position.w;
    vec3 ray_dir = normalize(projected_position.xyz - u_position);

    float initial_t = 0.0;
    float initial_iteration = 0.0;
    if (!u_first_pass) {
        vec4 initial = imageLoad(distancesIterationsTexture, ivec2(gl_GlobalInvocationID.xy / 2));

        initial_t = initial.r;
        initial_iteration = initial.g * 0.25;
    }

    vec3 res = Render(Ray(u_position, ray_dir), initial_t, initial_iteration);

    imageStore(outputTexture, ivec2(gl_GlobalInvocationID.xy), vec4(res, 1.0));
}