#version 430 core

layout (local_size_x = 16, local_size_y = 16) in;
layout (rgba32f, binding = 0) uniform writeonly image2D outputTexture;


uniform mat4 inv_proj_mat;

uniform float width;
uniform float height;

uniform int cone_size;

void main() {
    float offset = cone_size / height;

    vec2 pixel_coord = vec2(gl_GlobalInvocationID.xy);
    vec2 normalized_pixel_coord = (pixel_coord * cone_size) / vec2(width, height);
    vec2 ndc_coord = normalized_pixel_coord * 2.0 - 1.0 + offset;


    vec2 ndc_corner_c = vec2(ndc_coord.x - sign(ndc_coord.x) * offset, ndc_coord.y - sign(ndc_coord.y) * offset);
    vec2 ndc_corner_1 = vec2(ndc_coord.x - sign(ndc_coord.x) * offset, ndc_coord.y + sign(ndc_coord.y) * offset);
    vec2 ndc_corner_2 = vec2(ndc_coord.x + sign(ndc_coord.x) * offset, ndc_coord.y - sign(ndc_coord.y) * offset);

    vec4 projected_corner_c = inv_proj_mat * vec4(ndc_corner_c, -1.0, 1.0);
    vec4 projected_corner_1 = inv_proj_mat * vec4(ndc_corner_1, -1.0, 1.0);
    vec4 projected_corner_2 = inv_proj_mat * vec4(ndc_corner_2, -1.0, 1.0);

    vec3 ray_corner_c = normalize((projected_corner_c.xyz / projected_corner_c.w));
    vec3 ray_corner_1 = normalize((projected_corner_1.xyz / projected_corner_1.w));
    vec3 ray_corner_2 = normalize((projected_corner_2.xyz / projected_corner_2.w));

    vec3 ray_dir = normalize(ray_corner_1 + ray_corner_2);

    float cone_scale = length(ray_corner_1 - ray_corner_2) / 2.0;

    imageStore(outputTexture, ivec2(gl_GlobalInvocationID.xy), vec4(ray_dir, cone_scale));
}