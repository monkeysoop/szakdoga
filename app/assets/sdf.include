const float PI = 3.1415926535897932384626433832795;

struct Value {
    float d;
    int id;
};

float min3(float a, float b, float c) {
    return min(min(a, b), c);
}
float max3(float a, float b, float c) {
    return max(max(a, b), c);
}
float max3(vec3 a) {
    return max(max(a.x, a.y), a.z);
}
float min3(vec3 a) {
    return min(min(a.x, a.y), a.z);
}
float dot2(vec3 a) {
    return dot(a, a);
}

float Unite(float a, float b) {
    return min(a, b);
}

Value Unite(Value a, Value b) {
    if (b.d < a.d) {
        return b;
    }
    return a;
}

Value Unite(Value a, float b_d, int b_id) {
    if (b_d < a.d) {
        return Value(b_d, b_id);
    }
    return a;
}

Value Unite(float a_d, Value b, int b_id) {
    return Unite(Value(a_d, b_id), b);
}

vec3 opRepZ(vec3 p, float sz, float lo, float up) {
    return vec3(p.x, p.y, p.z - sz * clamp(round(p.z / sz), lo, up));
}

// SDF Primitives (more on https://iquilezles.org/articles/distfunctions/)
float sdRoundBox(vec3 p, vec3 b, float r) {
    vec3 q = abs(p) - b + r;
    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0) - r;
}
float sdBoxFrame(vec3 p, vec3 b, float e) {
    p = abs(p) - b;
    vec3 q = abs(p + e) - e;
    return min(min(length(max(vec3(p.x, q.y, q.z), 0.0)) + min(max(p.x, max(q.y, q.z)), 0.0),
                   length(max(vec3(q.x, p.y, q.z), 0.0)) + min(max(q.x, max(p.y, q.z)), 0.0)),
               length(max(vec3(q.x, q.y, p.z), 0.0)) + min(max(q.x, max(q.y, p.z)), 0.0));
}
float sdCapsule(vec3 p, vec3 a, vec3 b, float r) {
    vec3 pa = p - a, ba = b - a;
    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);
    return length(pa - ba * h) - r;
}
float sdSphere(vec3 p, float s) {
    return length(p) - s;
}
float sdBox(vec3 p, vec3 b) {
    vec3 d = abs(p) - b;
    return length(max(d, 0.0)) + min(max3(d.x, d.y, d.z), 0.0);
}

float pendulum(float t) {
    // const float q = 0.0;                   // initial angle: 0
    // const float q = 0.0004765699168668419; // initial angle: 10
    // const float q = 0.0019135945901703004; // initial angle: 20
    // const float q = 0.004333420509983138;  // initial angle: 30
    // const float q = 0.007774680416441802;  // initial angle: 40
    // const float q = 0.01229456052718145;   // initial angle: 50
    const float q = 0.017972387008967222;  // initial angle: 60
    // const float q = 0.02491506252398093;   // initial angle: 70
    // const float q = 0.03326525669557733;   // initial angle: 80
    // const float q = 0.04321391826377224;   // initial angle: 90

    float theta = 8.0 * (pow(q, 0.5) / (1.0 + pow(q, 1.0))) * cos(1.0 * t) +
                  -2.6666666666666665 * (pow(q, 1.5) / (1.0 + pow(q, 3.0))) * cos(3.0 * t) + 1.6 * (pow(q, 2.5) / (1.0 + pow(q, 5.0))) * cos(5.0 * t);
    //            + -1.1428571428571428 * (pow(q, 3.5) / (1.0 + pow(q, 7.0))) * cos(7.0 * t)
    //            + 0.8888888888888888  * (pow(q, 4.5) / (1.0 + pow(q, 9.0))) * cos(9.0 * t)
    //            + -0.7272727272727273 * (pow(q, 5.5) / (1.0 + pow(q, 11.0))) * cos(11.0 * t);

    return theta;
}

Value sdf_newton_cradle(vec3 p) {
    const float freq = 2.0;

    float first_sphere_angle = pendulum(clamp(mod(freq * u_time_in_seconds, 2.0 * PI), 0.5 * PI, 1.5 * PI) + PI);
    float last_sphere_angle = pendulum(clamp(mod(freq * u_time_in_seconds + PI, 2.0 * PI), 0.5 * PI, 1.5 * PI));

    vec3 first_sphere_pos = vec3(0.0, -13.0 + 7.0 * cos(first_sphere_angle), -4.0 - 7.0 * sin(first_sphere_angle));
    vec3 last_sphere_pos = vec3(0.0, -13.0 + 7.0 * cos(last_sphere_angle), 4.0 - 7.0 * sin(last_sphere_angle));
    vec3 first_cable_end_pos = vec3(0.0, -13.0 + 6.0 * cos(first_sphere_angle), -4.0 - 6.0 * sin(first_sphere_angle));
    vec3 last_cable_end_pos = vec3(0.0, -13.0 + 6.0 * cos(last_sphere_angle), 4.0 - 6.0 * sin(last_sphere_angle));

    p = vec3(p.x, p.y + 10.0, p.z);

    Value v = Value(u_max_distance, 0);
    v = Unite(v, Value(sdBoxFrame(p + vec3(0.0, -8.0, 0.0), vec3(3.0, 5.0, 6.0), 0.1), 1));
    v = Unite(v, Value(max(sdRoundBox(p + vec3(0.0, -3.0, 0.0), vec3(4.0, 1.0, 7.0), 0.5), -(p.y - 2.99)), 0));
    v = Unite(v, Value(sdSphere(p + first_sphere_pos, 1.0), 2));
    v = Unite(v, Value(sdSphere(p + last_sphere_pos, 1.0), 2));
    v = Unite(v, Value(sdCapsule(vec3(0.0, 0.0, 0.0), p + first_cable_end_pos, p + vec3(3.0 - 0.1, -13.0 + 0.1, -4.0), 0.05), 4));
    v = Unite(v, Value(sdCapsule(vec3(0.0, 0.0, 0.0), p + first_cable_end_pos, p + vec3(-3.0 + 0.1, -13.0 + 0.1, -4.0), 0.05), 4));
    v = Unite(v, Value(sdCapsule(vec3(0.0, 0.0, 0.0), p + last_cable_end_pos, p + vec3(3.0 - 0.1, -13.0 + 0.1, 4.0), 0.05), 4));
    v = Unite(v, Value(sdCapsule(vec3(0.0, 0.0, 0.0), p + last_cable_end_pos, p + vec3(-3.0 + 0.1, -13.0 + 0.1, 4.0), 0.05), 4));
    vec3 p_rep_z = opRepZ(p, 2.0, -1.0, 1.0);
    v = Unite(v, Value(sdSphere(p_rep_z + vec3(0.0, -6.0, 0.0), 1.0), 2));
    v = Unite(v, Value(sdCapsule(vec3(0.0, 0.0, 0.0), p_rep_z + vec3(0.0, -7.0, 0.0), p_rep_z + vec3(3.0 - 0.1, -13.0 + 0.1, 0.0), 0.05), 4));
    v = Unite(v, Value(sdCapsule(vec3(0.0, 0.0, 0.0), p_rep_z + vec3(0.0, -7.0, 0.0), p_rep_z + vec3(-3.0 + 0.1, -13.0 + 0.1, 0.0), 0.05), 4));

    return v;
}








// the following 2 sdf scenes are from https://github.com/tovacinni/sdf-explorer/tree/master

#define S(a, b, t) smoothstep(a, b, t)

#define MAT_BASE 0.
#define MAT_FENDERS 1.
#define MAT_RUBBER 2.
#define MAT_LIGHTS 3.
#define MAT_GLASS 4.
#define MAT_SHUTTERS 5.
#define MAT_GROUND 6.
#define MAT_CAB 6.

// From http://mercury.sexy/hg_sdf
vec2 pModPolar(inout vec2 p, float repetitions, float fix) {
    float angle = 6.2832/repetitions;
    float a = atan(p.y, p.x) + angle/2.;
    float r = length(p);
    float c = floor(a/angle);
    a = mod(a,angle) - (angle/2.)*fix;
    p = vec2(cos(a), sin(a))*r;

    return p;
}

float sabs(float x,float k) {
    float a = (.5/k)*x*x+k*.5;
    float b = abs(x);
    return b<k ? a : b;
}
vec2 sabs(vec2 x,float k) { return vec2(sabs(x.x, k), sabs(x.y,k)); }
vec3 sabs(vec3 x,float k) { return vec3(sabs(x.x, k), sabs(x.y,k), sabs(x.z,k)); }

float smin( float a, float b, float k ) {
    float h = clamp( 0.5+0.5*(b-a)/k, 0., 1. );
    return mix( b, a, h ) - k*h*(1.0-h);
}

mat2 Rot(float a) {
    float s = sin(a);
    float c = cos(a);
    return mat2(c, -s, s, c);
}

float sdCylinder(vec3 p, vec3 a, vec3 b, float r) {
    vec3 ab = b-a;
    vec3 ap = p-a;
    
    float t = dot(ab, ap) / dot(ab, ab);
    //t = clamp(t, 0., 1.);
    
    vec3 c = a + t*ab;
    
    float x = length(p-c)-r;
    float y = (abs(t-.5)-.5)*length(ab);
    float e = length(max(vec2(x, y), 0.));
    float i = min(max(x, y), 0.);
    
    return e+i;
}

float map01(float a, float b, float t) {
    return clamp((t-a)/(b-a), 0., 1.);
}
float map(float t, float a, float b, float c, float d) {
    return (d-c)*clamp((t-a)/(b-a), 0., 1.)+c;
}

vec2 sdCar(vec3 p) {
    float matId=MAT_BASE;
    p.x = sabs(p.x, .5);        // smooth abs to make front rounded
    
    vec2 P = p.yz;
    
    // body
    float d, w;
    
    float frontGlass = dot(P, vec2(0.9493, 0.3142))-1.506; // front
    d = frontGlass;
    
    float topGlass = dot(P, vec2(0.9938, -0.1110))-1.407;
    d = max(d, topGlass); 
    float back = dot(P, vec2(0.9887, -0.16))-1.424;
    d = max(d, back); // back
    
    float side1 = dot(p, vec3(0.9854, -0.1696, -0.0137))-0.580;
    d = max(d, side1); // side 1
    
    float side2 = dot(p, vec3(0.9661, 0.2583, 0.0037))-0.986;
    d = smin(d, side2, -.005);
    d = max(d, dot(P, vec2(-0.1578, -0.9875))-2.056); // rear
    d = max(d, dot(p, vec3(0.0952, -0.1171, 0.9885))-2.154);
    d = max(d, dot(p, vec3(0.5019, -0.1436, 0.8529))-2.051);
    d = max(d, dot(P, vec2(-0.9999, -0.0118))+0.2643); // bottom
    d = max(d, dot(p, vec3(0.0839, -0.4614, 0.8832))-1.770);
    d = max(d, dot(p, vec3(0.0247, -0.9653, 0.2599))-0.196);
    d = max(d, dot(P, vec2(-0.9486, -0.3163))-0.295);
    
    float body = d;
    float car = d;
    if((-frontGlass<car && p.z < 1.8-p.x*p.x*.16 && side2<-.01) ||
       (abs(-topGlass-car)<.01 && p.z>-.6 && p.z < .5 && side2<-.01)) 
        matId = MAT_GLASS;
    
    // bed shutters
    d = max(1.-p.y, max(p.x-.63, abs(p.z+1.44)-.73));
    if(d<-.02) matId = MAT_SHUTTERS;
    
    d = max(d, (-back-.01)-S(.5,1., sin(p.z*100.))*.0);
    
    car = max(car, -d);
    
    // bumper
    d = S(.03, .02, abs(p.y-.55))*.045;
    d -= S(.55, .52, p.y)*.05;
    d *= S(1.3, 1.5, abs(p.z));
    
    float rB = max(p.x-p.y*.15-.21, .45-p.y);
    float fB = max(p.x-.51, abs(.42-p.y)-.02);
    d *= S(.0,.01, mix(rB, fB, step(0.,p.z)));
    if(p.y<.58-step(abs(p.z), 1.3)) matId = MAT_FENDERS;
    
    // lights
    float lt = map01(.5, .8, p.x);
    float lights = map01(.02*(1.+lt), .01*(1.+lt), abs(p.y-(.82+lt*.03)));
    lights *= S(2.08, 2.3, p.z);
    d += lights*.05;
    lights = map01(.01, .0, side1+.0175);
    lights *= step(p.z, -2.17);
    lights *= map01(.01, .0, abs(p.y-1.04)-.025);
    d += lights*.03;
    
    if(d>0.&&matId==0.) matId = MAT_LIGHTS;
    
    if(car<.1) d*= .5;
    car += d;
    
    // step
    car += map(p.y+p.z*.022, .495, .325, 0., .05);//-S(.36, .34, p.y)*.1;
    d = sdBox(p-vec3(0, .32, 0), vec3(.72+p.z*.02, .03, 1.2));
    if(d<car) matId = MAT_FENDERS;
    car = min(car, d);
    
    // windows Holes
    
    d = w = dot(P, vec2(-0.9982, -0.0601))+1.0773;
    d = max(d, dot(P, vec2(0.1597, -0.9872))-0.795);
    d = max(d, dot(P, vec2(0.9931, -0.1177))-1.357);
    d = max(d, dot(P, vec2(0.9469, 0.3215))-1.459);
    //d = max(d, -.03-side2);
    float sideWindow = dot(p, vec3(-0.9687, -0.2481, 0.0106))+0.947;
    sideWindow += map01(0., 1., p.y-1.)*.05;
    if(d<-.005) matId = MAT_GLASS;
    
    d = max(d, sideWindow);
    car = max(car, -d);
    
    // panel lines
    if(car<.1) {
        d = abs(dot(p.yz, vec2(0.0393, 0.9992))+0.575);
        d = min(d, abs(dot(p.yz, vec2(0.0718, 0.9974))-0.3));
        d = min(d, abs(p.z-1.128));
        float panels = S(.005, .0025, d) * step(0., w) * step(.36, p.y);
        
        float handleY = dot(p.yz, vec2(-0.9988, -0.0493))+0.94;
        d = S(.02, .01, abs(handleY))*S(.01, .0, min(abs(p.z-.4)-.1, abs(p.z+.45)-.1));
        panels -= abs(d-.5)*.5;
        
        // charger
        d = S(.02, .01, abs(p.y-.81)-.04)*S(.01, .0, abs(p.z+1.75)-.12);
        panels += abs(d-.5)*.5;
        
        d = S(.005, .0, abs(side2+.015));
        d *= S(.03, .0, abs(frontGlass));
        panels += d;
        
        car += panels *.001;
    }
    
    // fenders
    //front
    d = dot(p, vec3(0.4614, 0.3362, 0.8210))-2.2130;
    d = max(d, dot(p, vec3(0.4561, 0.8893, 0.0347))-1.1552);
    d = max(d, dot(p, vec3(0.4792, 0.3783, -0.7920))+0.403);
    d = max(d, dot(p, vec3(0.4857, -0.0609, -0.8720))+0.6963);
    d = max(d, dot(p, vec3(0.4681, -0.4987, 0.7295))-1.545);
    d = max(d, .3-p.y);
    d = max(d, abs(p.x-.62-p.y*.15)-.07);
    if(d<car) matId = MAT_FENDERS;
    car = min(car, d);
    
    // back
    d = dot(p, vec3(0.4943, -0.0461, 0.8681))+0.4202;
    d = max(d, dot(p, vec3(0.4847, 0.4632, 0.7420))+0.0603);
    d = max(d, dot(p, vec3(0.4491, 0.8935, 0.0080))-1.081);
    d = max(d, dot(p, vec3(0.3819, 0.4822, -0.7885))-1.973);    
    d = max(d, min(.58-p.y, -1.5-p.z));
    d = max(d, .3-p.y);
    d = max(d, abs(side1+.01)-.08);
    if(d<car) matId = MAT_FENDERS;
    car = min(car, d);
    
    //if(car>.1) return vec2(car, matId);
    
    // wheel well
    // front
    d = p.z-2.0635;
    d = max(d, dot(p.yz, vec2(0.5285, 0.8489))-2.0260);
    d = max(d, dot(p.yz, vec2(0.9991, 0.0432))-0.8713);
    d = max(d, dot(p.yz, vec2(0.5258, -0.8506))+0.771);
    d = max(d, 1.194-p.z);
    d = max(d, .5-p.x);
    car = max(car, -d);
    if(d<car) matId = MAT_FENDERS;
    
    // back
    d = p.z+0.908;
    d = max(d, dot(p.yz, vec2(0.5906, 0.8070))+0.434);
    d = max(d, dot(p.yz, vec2(0.9998, 0.0176))-0.7843);
    d = max(d, dot(p, vec3(-0.0057, 0.5673, -0.8235))-1.7892);
    d = max(d, -p.z-1.7795);
    d = max(d, .5-p.x);//.65-p.x
    car = max(car, -d);
    if(d<car) matId = MAT_FENDERS;
    
    return vec2(car, matId);
   
}

vec2 sdWheel(vec3 p) {
    float matId=MAT_RUBBER;
    
    vec3 wp = p;
    float  w = sdCylinder(wp, vec3(-.1, 0,0), vec3(.1, 0,0), .32)-.03;
    float dist = length(wp.zy);
    
    if(dist>.3&&w<.05) {        // wheel detail
        float a = atan(wp.z, wp.y);
        float x = wp.x*20.;
        float tireTop = S(.29, .4, dist);
        float thread = S(-.5, -.3, sin(a*40.+x*x))*.01 * tireTop;
        
        thread *= S(.0, .007, abs(abs(wp.x)-.07+sin(a*20.)*.01));
        thread *= S(.005, .01, abs(wp.x+sin(a*20.)*.03));
        
        w -= thread*2.;
        
        float e = length(wp-vec3(2, .1, 0))-.5;
        w = min(w, e);
    }
    
    if(w>.1) return vec2(w, matId);
    
    wp *= .95;
    wp.yz = pModPolar(wp.yz, 7., 1.);
    float cap = max(p.x-.18, wp.y-.3);
    
    wp.z = abs(wp.z);
    
    float d = map01( .3, .23, wp.y);        // spoke bevel
    d *= map01(.04, .03, wp.z);             // spokes
    d *= map01(-.23, .23, wp.y)*.7;         // spoke gradient
    
    d = max(d, map01(.13, .0, wp.y)*1.5);   // center outside
    d = min(d, map01(.0, .07, wp.y));       // center inside
    d = max(d, .8*step(wp.y, .05));         // middle plateau
    
    d = max(d, .4*map01(.23, .22, dot(wp.zy, normalize(vec2(1., 2.)))));
    cap += (1.-d)*.07;
    cap = max(cap, .05-p.x);
    cap *= .8;
    if(cap<w) matId = MAT_FENDERS;
    
    w = min(w, cap);
    w += S(.3, .0, dist)*.025; // concavivy!
    
    return vec2(w, matId);
}

Value sdf_car(vec3 p) {
    p.y += 0.2;

    float car = sdCar(p).x * 0.8;
    vec3 wp = p-vec3(0,0,.14);
    wp.xz = abs(wp.xz);
    wp-=vec3(.7383, .365, 1.5);
    
    if(p.z>0.) wp.xz *= Rot(.3*sign(p.x));
    float wheel = sdWheel(wp).x;
    
    return Value(min(car, wheel), 4);
}









// Noise functions
// These are taken from https://www.shadertoy.com/view/ldSSzV
float hash11(float p) {
    return fract(sin(p * 727.1) * 435.545);
}
float hash12(vec2 p) {
    float h = dot(p, vec2(127.1, 311.7));
    return fract(sin(h) * 437.545);
}
vec3 hash31(float p) {
    vec3 h = vec3(127.231, 491.7, 718.423) * p;
    return fract(sin(h) * 435.543);
}
// 3d noise
float noise_3(in vec3 p) {
    vec3 i = floor(p);
    vec3 f = fract(p);
    vec3 u = f * f * (3.0 - 2.0 * f);

    vec2 ii = i.xy + i.z * vec2(5.0);
    float a = hash12(ii + vec2(0.0, 0.0));
    float b = hash12(ii + vec2(1.0, 0.0));
    float c = hash12(ii + vec2(0.0, 1.0));
    float d = hash12(ii + vec2(1.0, 1.0));
    float v1 = mix(mix(a, b, u.x), mix(c, d, u.x), u.y);

    ii += vec2(5.0);
    a = hash12(ii + vec2(0.0, 0.0));
    b = hash12(ii + vec2(1.0, 0.0));
    c = hash12(ii + vec2(0.0, 1.0));
    d = hash12(ii + vec2(1.0, 1.0));
    float v2 = mix(mix(a, b, u.x), mix(c, d, u.x), u.y);

    return max(mix(v1, v2, u.z), 0.0);
}
mat3 RotMat(vec3 axis, float angle) {
    // http://www.neilmendoza.com/glsl-rotation-about-an-arbitrary-axis/
    axis = normalize(axis);
    float s = sin(angle);
    float c = cos(angle);
    float oc = 1.0 - c;
    
    return mat3(oc*axis.x*axis.x+c,         oc*axis.x*axis.y-axis.z*s,  oc*axis.z*axis.x+axis.y*s, 
                oc*axis.x*axis.y+axis.z*s,  oc*axis.y*axis.y+c,         oc*axis.y*axis.z-axis.x*s, 
                oc*axis.z*axis.x-axis.y*s,  oc*axis.y*axis.z+axis.x*s,  oc*axis.z*axis.z+c);
}
float fbm3_high(vec3 p, float a, float f) {
    float ret = 0.0;
    float amp = 1.0;
    float frq = 1.0;
    for (int i = 0; i < 5; i++) {
        float n = pow(noise_3(p * frq), 2.0);
        ret += n * amp;
        frq *= f;
        amp *= a * (pow(n, 0.2));
    }
    return ret;
}

float hash1(vec2 p) {
    p = 50.0 * fract(p * 0.3183099);
    return fract(p.x * p.y * (p.x + p.y));
}

float ndot(vec2 a, vec2 b) {
    return a.x * b.x - a.y * b.y;
}

float sdRhombus(in vec2 p, in vec2 b, in float r) {
    vec2 q = abs(p);
    float h = clamp((-2.0 * ndot(q, b) + ndot(b, b)) / dot(b, b), -1.0, 1.0);
    float d = length(q - 0.5 * b * vec2(1.0 - h, 1.0 + h));
    d *= sign(q.x * b.y + q.y * b.x - b.x * b.y);
    return d - r;
}

float utemple_sdBox(in vec3 p, in vec3 b) {
    return length(max(abs(p) - b, 0.0));
}

float temple_sdBox(vec3 p, vec3 b) {
    vec3 d = abs(p) - b;
    return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));
}

float temple_sdBox(float p, float b) {
    return abs(p) - b;
}

vec2 opRepLim(in vec2 p, in float s, in vec2 lim) {
    return p - s * clamp(round(p / s), -lim, lim);
}

vec2 opRepLim(in vec2 p, in float s, in vec2 limmin, in vec2 limmax) {
    return p - s * clamp(round(p / s), -limmin, limmax);
}

vec3 temple(in vec3 p) {
    vec3 op = p;
    vec3 res = vec3(-1.0, -1.0, 0.5);

    p.y += 2.0;

    // bounding box
    float bbox = utemple_sdBox(p, vec3(15.0, 12.0, 15.0) * 1.5);
    if (bbox > 5.0)
        return vec3(bbox + 1.0, -1.0, 0.5);
    vec3 q = p;
    q.xz = opRepLim(q.xz, 4.0, vec2(4.0, 2.0));

    // columns
    vec2 id = floor((p.xz + 2.0) / 4.0);

    float d = length(q.xz) - 0.9 + 0.05 * p.y;
    d = max(d, p.y - 6.0);
    d = max(d, -p.y - 5.0);
    d -= 0.05 * pow(0.5 + 0.5 * sin(atan(q.x, q.z) * 16.0), 2.0);
    d -= 0.15 * pow(0.5 + 0.5 * sin(q.y * 3.0 + 0.6), 0.12) - 0.15;
    res.z = hash1(id + 11.0 * floor(0.25 + (q.y * 3.0 + 0.6) / 6.2831));
    d *= 0.85;

    {
        vec3 qq = vec3(q.x, abs(q.y - 0.3) - 5.5, q.z);
        d = min(d, temple_sdBox(qq, vec3(1.4, 0.2, 1.4) + sign(q.y - 0.3) * vec3(0.1, 0.05, 0.1)) - 0.1);  // base
    }

    d = max(d, -temple_sdBox(p, vec3(14.0, 10.0, 6.0)));  // clip in

    // floor
    float ra = 0.15 * hash1(id + vec2(1.0, 3.0));
    q = p;
    q.xz = opRepLim(q.xz, 4.0, vec2(4.0, 3.0));
    float b = temple_sdBox(q - vec3(0.0, -6.0 + 0.1 - ra, 0.0), vec3(2.0, 0.5, 2.0) - 0.15 - ra) - 0.15;
    b *= 0.5;
    if (b < d) {
        d = b;
        res.z = hash1(id);
    }

    p.xz -= 2.0;
    id = floor((p.xz + 2.0) / 4.0);
    ra = 0.15 * hash1(id + vec2(1.0, 3.0) + 23.1);
    q = p;
    q.xz = opRepLim(q.xz, 4.0, vec2(5.0, 4.0), vec2(5.0, 3.0));
    b = temple_sdBox(q - vec3(0.0, -7.0 - ra, 0.0), vec3(2.0, 0.6, 2.0) - 0.15 - ra) - 0.15;
    b *= 0.8;
    if (b < d) {
        d = b;
        res.z = hash1(id + 13.5);
    }
    p.xz += 2.0;

    id = floor((p.xz + 2.0) / 4.0);
    ra = 0.15 * hash1(id + vec2(1.0, 3.0) + 37.7);
    q = p;
    q.xz = opRepLim(q.xz, 4.0, vec2(5.0, 4.0));
    b = temple_sdBox(q - vec3(0.0, -8.0 - ra - 1.0, 0.0), vec3(2.0, 0.6 + 1.0, 2.0) - 0.15 - ra) - 0.15;
    b *= 0.5;
    if (b < d) {
        d = b;
        res.z = hash1(id * 7.0 + 31.1);
    }

    // roof
    q = vec3(mod(p.x + 2.0, 4.0) - 2.0, p.y, mod(p.z + 0.0, 4.0) - 2.0);
    b = temple_sdBox(q - vec3(0.0, 7.0, 0.0), vec3(1.95, 1.0, 1.95) - 0.15) - 0.15;
    b = max(b, temple_sdBox(p - vec3(0.0, 7.0, 0.0), vec3(18.0, 1.0, 10.0)));
    if (b < d) {
        d = b;
        res.z = hash1(floor((p.xz + vec2(2.0, 0.0)) / 4.0) + 31.1);
    }

    q = vec3(mod(p.x + 0.5, 1.0) - 0.5, p.y, mod(p.z + 0.5, 1.0) - 0.5);
    b = temple_sdBox(q - vec3(0.0, 8.0, 0.0), vec3(0.45, 0.5, 0.45) - 0.02) - 0.02;
    b = max(b, temple_sdBox(p - vec3(0.0, 8.0, 0.0), vec3(19.0, 0.2, 11.0)));
    // q = p+vec3(0.0,0.0,-0.5); q.xz = opRepLim( q.xz, 1.0, vec2(19.0,10.0) );
    // b = temple_sdBox( q-vec3(0.0,8.0,0.0), vec3(0.45,0.2,0.45)-0.02 )-0.02;
    if (b < d) {
        d = b;
        res.z = hash1(floor((p.xz + 0.5) / 1.0) + 7.8);
    }

    b = sdRhombus(p.yz - vec2(8.2, 0.0), vec2(3.0, 11.0), 0.05);
    q = vec3(mod(p.x + 1.0, 2.0) - 1.0, p.y, mod(p.z + 1.0, 2.0) - 1.0);
    b = max(b, -temple_sdBox(vec3(abs(p.x) - 20.0, p.y, q.z) - vec3(0.0, 8.0, 0.0), vec3(2.0, 5.0, 0.1)) - 0.02);

    b = max(b, -p.y + 8.2);
    b = max(b, utemple_sdBox(p - vec3(0.0, 8.0, 0.0), vec3(19.0, 12.0, 11.0)));
    float c = sdRhombus(p.yz - vec2(8.3, 0.0), vec2(2.25, 8.5), 0.05);
    c = max(c, temple_sdBox(abs(p.x) - 19.0, 2.0));
    b = max(b, -c);

    d = min(d, b);

    d = max(d, -temple_sdBox(p - vec3(0.0, 9.5, 0.0), vec3(15.0, 4.0, 9.0)));

    d -= 0.02 * smoothstep(0.5, 1.0, fbm3_high(p.zxy, 0.4, 2.96));
    d -= 0.01 * smoothstep(0.4, 0.8, fbm3_high(op * 3.0, 0.4, 2.96));
    // d += 0.005;

    res = vec3(d, 1.0, res.z);

    return res;
}

Value sdf_temple(vec3 p) {
    p *= RotMat(vec3(0., 1., 0.), -PI / 2.);
    return Value(temple(p).x, 4);
}


Value sdf(vec3 p) {
    Value res;
    
#if SDF_SCENE == NEWTONS_CRADLE
    res = sdf_newton_cradle(p);
#elif SDF_SCENE == CAR
    res = sdf_car(p);
#elif SDF_SCENE == TEMPLE
    res = sdf_temple(p);
#endif

    return res;
}

vec3 Normal(vec3 p) {
    const vec2 eps0 = vec2(0.001, 0);
    vec3 m0 = vec3(sdf(p - eps0.xyy).d, sdf(p - eps0.yxy).d, sdf(p - eps0.yyx).d);
    vec3 m1 = vec3(sdf(p + eps0.xyy).d, sdf(p + eps0.yxy).d, sdf(p + eps0.yyx).d);
    return normalize(m1 - m0);
}