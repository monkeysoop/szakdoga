#ifndef SDF_NEWTONS_CRADLE_INCLUDE
#define SDF_NEWTONS_CRADLE_INCLUDE



#include "assets/value.include"



const float PI = 3.1415926535897932384626433832795;

vec3 opRepZ(vec3 p, float sz, float lo, float up) {
    return vec3(p.x, p.y, p.z - sz * clamp(round(p.z / sz), lo, up));
}

// SDF Primitives (more on https://iquilezles.org/articles/distfunctions/)
float sdRoundBox(vec3 p, vec3 b, float r) {
    vec3 q = abs(p) - b + r;
    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0) - r;
}
float sdBoxFrame(vec3 p, vec3 b, float e) {
    p = abs(p) - b;
    vec3 q = abs(p + e) - e;
    return min(min(length(max(vec3(p.x, q.y, q.z), 0.0)) + min(max(p.x, max(q.y, q.z)), 0.0),
                   length(max(vec3(q.x, p.y, q.z), 0.0)) + min(max(q.x, max(p.y, q.z)), 0.0)),
               length(max(vec3(q.x, q.y, p.z), 0.0)) + min(max(q.x, max(q.y, p.z)), 0.0));
}
float sdCapsule(vec3 p, vec3 a, vec3 b, float r) {
    vec3 pa = p - a, ba = b - a;
    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);
    return length(pa - ba * h) - r;
}
float sdSphere(vec3 p, float s) {
    return length(p) - s;
}
float sdBox(vec3 p, vec3 b) {
    vec3 d = abs(p) - b;
    return length(max(d, 0.0)) + min(max(max(d.x, d.y), d.z), 0.0);
}

float pendulum(float t) {
    // const float q = 0.0;                   // initial angle: 0
    // const float q = 0.0004765699168668419; // initial angle: 10
    // const float q = 0.0019135945901703004; // initial angle: 20
    // const float q = 0.004333420509983138;  // initial angle: 30
    // const float q = 0.007774680416441802;  // initial angle: 40
    // const float q = 0.01229456052718145;   // initial angle: 50
    const float q = 0.017972387008967222;  // initial angle: 60
    // const float q = 0.02491506252398093;   // initial angle: 70
    // const float q = 0.03326525669557733;   // initial angle: 80
    // const float q = 0.04321391826377224;   // initial angle: 90

    float theta = 8.0 * (pow(q, 0.5) / (1.0 + pow(q, 1.0))) * cos(1.0 * t) +
                  -2.6666666666666665 * (pow(q, 1.5) / (1.0 + pow(q, 3.0))) * cos(3.0 * t) + 1.6 * (pow(q, 2.5) / (1.0 + pow(q, 5.0))) * cos(5.0 * t);
    //            + -1.1428571428571428 * (pow(q, 3.5) / (1.0 + pow(q, 7.0))) * cos(7.0 * t)
    //            + 0.8888888888888888  * (pow(q, 4.5) / (1.0 + pow(q, 9.0))) * cos(9.0 * t)
    //            + -0.7272727272727273 * (pow(q, 5.5) / (1.0 + pow(q, 11.0))) * cos(11.0 * t);

    return theta;
}

Value sdf(vec3 p) {
    const float freq = 2.0;

    float first_sphere_angle = pendulum(clamp(mod(freq * u_time_in_seconds, 2.0 * PI), 0.5 * PI, 1.5 * PI) + PI);
    float last_sphere_angle = pendulum(clamp(mod(freq * u_time_in_seconds + PI, 2.0 * PI), 0.5 * PI, 1.5 * PI));

    vec3 first_sphere_pos = vec3(0.0, -13.0 + 7.0 * cos(first_sphere_angle), -4.0 - 7.0 * sin(first_sphere_angle));
    vec3 last_sphere_pos = vec3(0.0, -13.0 + 7.0 * cos(last_sphere_angle), 4.0 - 7.0 * sin(last_sphere_angle));
    vec3 first_cable_end_pos = vec3(0.0, -13.0 + 6.0 * cos(first_sphere_angle), -4.0 - 6.0 * sin(first_sphere_angle));
    vec3 last_cable_end_pos = vec3(0.0, -13.0 + 6.0 * cos(last_sphere_angle), 4.0 - 6.0 * sin(last_sphere_angle));

    p = vec3(p.x, p.y + 10.0, p.z);

    Value v = Value(u_max_distance, 0);
    v = Unite(v, Value(sdBoxFrame(p + vec3(0.0, -8.0, 0.0), vec3(3.0, 5.0, 6.0), 0.1), 1));
    v = Unite(v, Value(max(sdRoundBox(p + vec3(0.0, -3.0, 0.0), vec3(4.0, 1.0, 7.0), 0.5), -(p.y - 2.99)), 0));
    v = Unite(v, Value(sdSphere(p + first_sphere_pos, 1.0), 2));
    v = Unite(v, Value(sdSphere(p + last_sphere_pos, 1.0), 2));
    v = Unite(v, Value(sdCapsule(vec3(0.0, 0.0, 0.0), p + first_cable_end_pos, p + vec3(3.0 - 0.1, -13.0 + 0.1, -4.0), 0.05), 4));
    v = Unite(v, Value(sdCapsule(vec3(0.0, 0.0, 0.0), p + first_cable_end_pos, p + vec3(-3.0 + 0.1, -13.0 + 0.1, -4.0), 0.05), 4));
    v = Unite(v, Value(sdCapsule(vec3(0.0, 0.0, 0.0), p + last_cable_end_pos, p + vec3(3.0 - 0.1, -13.0 + 0.1, 4.0), 0.05), 4));
    v = Unite(v, Value(sdCapsule(vec3(0.0, 0.0, 0.0), p + last_cable_end_pos, p + vec3(-3.0 + 0.1, -13.0 + 0.1, 4.0), 0.05), 4));
    vec3 p_rep_z = opRepZ(p, 2.0, -1.0, 1.0);
    v = Unite(v, Value(sdSphere(p_rep_z + vec3(0.0, -6.0, 0.0), 1.0), 2));
    v = Unite(v, Value(sdCapsule(vec3(0.0, 0.0, 0.0), p_rep_z + vec3(0.0, -7.0, 0.0), p_rep_z + vec3(3.0 - 0.1, -13.0 + 0.1, 0.0), 0.05), 4));
    v = Unite(v, Value(sdCapsule(vec3(0.0, 0.0, 0.0), p_rep_z + vec3(0.0, -7.0, 0.0), p_rep_z + vec3(-3.0 + 0.1, -13.0 + 0.1, 0.0), 0.05), 4));

    return v;
}



#endif