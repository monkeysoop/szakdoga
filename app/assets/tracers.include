#ifndef TRACERS_INCLUDE
#define TRACERS_INCLUDE



#include "assets/sdf.include"
#include "assets/value.include"
#include "assets/tracing_result.include"
#include "assets/ray.include"



TracingResult naive_sphere_tracing(
    Ray ray, 
    float initial_t, 
    float initial_iteration, 
    float epsilon, 
    float max_distance, 
    float max_iteration_count
) {
    float t = initial_t;
    float d;

    uint material_id;

    float steps = initial_iteration;

    float min_scale = 1.0;

    do {
        Value v = sdf(ray.position + t * ray.direction);
        steps += 1.0;

        d = abs(v.d);
        material_id = v.id;

        min_scale = min(min_scale, (d / t));

        t += d;
    } while (d > epsilon * t && t < max_distance && steps < max_iteration_count);

    if (d <= epsilon * t) {
        return TracingResult(TRACING_RESULT_HIT, t, steps, min_scale, material_id);
    } else if (t >= max_distance){
        return TracingResult(TRACING_RESULT_MAX_DISTANCE_REACHED, max_distance, steps, min_scale, material_id);
    } else {
        return TracingResult(TRACING_RESULT_MAX_ITERATION_COUNT_REACHED, t, max_iteration_count, min_scale, material_id);
    }
}

TracingResult relaxed_sphere_tracing(
    Ray ray, 
    float initial_t, 
    float initial_iteration, 
    float epsilon, 
    float max_distance, 
    float max_iteration_count, 
    float step_multiplier
) {
    float next_d;
    float next_t = initial_t;

    float d = 0.0;
    float t = initial_t;

    uint material_id;

    float steps = initial_iteration;

    float min_scale = 1.0;

    do {
        Value v = sdf(ray.position + next_t * ray.direction);
        steps += 1.0;

        next_d = abs(v.d);

        if ((d + next_d) < step_multiplier * d && next_t != (t + d)) {
            next_t = t + d;
        } else {
            t = next_t;
            d = next_d;
            material_id = v.id;

            min_scale = min(min_scale, (d / t));

            next_t = next_t + step_multiplier * next_d;
        }
    } while (d > epsilon * t && t < max_distance && steps < max_iteration_count);
 
    if (d <= epsilon * t) {
        return TracingResult(TRACING_RESULT_HIT, t, steps, min_scale, material_id);
    } else if (t >= max_distance){
        return TracingResult(TRACING_RESULT_MAX_DISTANCE_REACHED, max_distance, steps, min_scale, material_id);
    } else {
        return TracingResult(TRACING_RESULT_MAX_ITERATION_COUNT_REACHED, t, max_iteration_count, min_scale, material_id);
    }
}

TracingResult enhanced_sphere_tracing(
    Ray ray, 
    float initial_t, 
    float initial_iteration, 
    float epsilon, 
    float max_distance, 
    float max_iteration_count, 
    float step_multiplier, 
    float max_step_factor
) {
    float next_d;
    float next_t = initial_t;

    float d = 0.0;
    float t = initial_t;

    uint material_id;

    float s = 0.0;
    float next_s = 0.0;

    float steps = initial_iteration;

    float min_scale = 1.0;

    do {
        Value v = sdf(ray.position + next_t * ray.direction);
        steps += 1.0;

        next_d = abs(v.d);

        if ((d + next_d) < next_s && next_t != (t + d)) {
            next_s = d;
            s = d;

            next_t = t + d;
        } else {
            next_s = next_d + step_multiplier * next_d * ((-1.0 * d + next_d + s) / (d - next_d + s));
            next_s = clamp(next_s, next_d, max_step_factor * next_d);

            t = next_t;
            d = next_d;
            material_id = v.id;

            min_scale = min(min_scale, (d / t));

            s = next_s;

            next_t = next_t + next_s;
        }
    } while (d > epsilon * t && t < max_distance && steps < max_iteration_count);

    if (d <= epsilon * t) {
        return TracingResult(TRACING_RESULT_HIT, t, steps, min_scale, material_id);
    } else if (t >= max_distance){
        return TracingResult(TRACING_RESULT_MAX_DISTANCE_REACHED, max_distance, steps, min_scale, material_id);
    } else {
        return TracingResult(TRACING_RESULT_MAX_ITERATION_COUNT_REACHED, t, max_iteration_count, min_scale, material_id);
    }
}



#endif