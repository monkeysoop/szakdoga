@startuml





/' Objects '/

namespace szakdoga {
	namespace core {
		class App {
			+App(unsigned width, unsigned height)
			+~App()
			-m_camera : Camera
			-m_camera_manipulator : CameraManipulator
			-m_cone_trace_final_shader : CompShader
			-m_cone_trace_precompute_shader : CompShader
			-m_cone_trace_shader : CompShader
			-m_sphere_trace_shader : CompShader
			-m_framebuffer : Framebuffer
			-m_render_mode : RenderModeType
			-m_sdf_scene : SDFSceneType
			-m_skybox : Skybox
			-m_cone_trace_final_sphere_tracing_type : SphereTracingType
			-m_cone_trace_sphere_tracing_type : SphereTracingType
			-m_sphere_tracing_type : SphereTracingType
			-m_cone_trace_distance_iteration_texture_1 : Texture2D
			-m_cone_trace_distance_iteration_texture_2 : Texture2D
			-m_cone_trace_precomputed_texture : Texture2D
			-m_tracing_type : TracingType
			-m_ambient_strength : float
			-m_ao_multiplier_attenuation : float
			-m_ao_step_size : float
			-m_ao_strength : float
			-m_cone_trace_enhanced_max_step_factor : float
			-m_cone_trace_enhanced_step_multiplier : float
			-m_cone_trace_final_enhanced_max_step_factor : float
			-m_cone_trace_final_enhanced_step_multiplier : float
			-m_cone_trace_final_relaxed_step_multiplier : float
			-m_cone_trace_intermediate_epsilon : float
			-m_cone_trace_relaxed_step_multiplier : float
			-m_enhanced_max_step_factor : float
			-m_enhanced_step_multiplier : float
			-m_epsilon : float
			-m_max_distance : float
			-m_reflection_attenuation : float
			-m_relaxed_step_multiplier : float
			-m_shadow_intensity : float
			-m_shadow_penumbra : float
			-m_time_in_seconds : float
			-DivideAndRoundUp(unsigned number, unsigned divisor) : unsigned
			-m_ao_max_iteration_count : unsigned
			-m_benchmark_baseline_iteration_count : unsigned
			-m_benchmark_iteration_count_spacing : unsigned
			-m_benchmark_max_iteration_count : unsigned
			-m_benchmark_min_iteration_count : unsigned
			-m_benchmark_performance_number_of_runs : unsigned
			-m_height : unsigned
			-m_initial_cone_size : unsigned
			-m_max_iteration_count : unsigned
			-m_shadow_max_iteration_count : unsigned
			-m_width : unsigned
			-u_max_number_of_reflections : unsigned
			-Benchmark() : void
			-BenchmarkSingleCone(const std::filesystem::path& base_path, SDFSceneType sdf_scene, RenderModeType render_mode, SphereTracingType cone_tracing_type, SphereTracingType cone_final_tracing_type) : void
			-BenchmarkSingleSphere(const std::filesystem::path& base_path, SDFSceneType sdf_scene, RenderModeType render_mode, SphereTracingType sphere_tracing_type) : void
			-ConeTraceRender() : void
			+KeyboardDown(const SDL_KeyboardEvent& key) : void
			+KeyboardUp(const SDL_KeyboardEvent& key) : void
			+MouseMove(const SDL_MouseMotionEvent& mouse) : void
			+MouseWheel(const SDL_MouseWheelEvent& wheel) : void
			-PrecomputeCones() : void
			-RecompileConeFinalTracer(SDFSceneType sdf_scene, RenderModeType render_mode, SphereTracingType cone_final_tracing_type) : void
			-RecompileConeTracer(SDFSceneType sdf_scene, SphereTracingType cone_tracing_type) : void
			-RecompileSphereTracer(SDFSceneType sdf_scene, RenderModeType render_mode, SphereTracingType sphere_tracing_type) : void
			+Render() : void
			+RenderImGui() : void
			+Resize(unsigned width, unsigned height) : void
			-SphereTraceRender() : void
			+Update(float elapsed_time_in_seconds, float delta_time_in_seconds) : void
			-WriteTimeTaken(const std::filesystem::path& path, double ms_taken_chrono, double ms_taken_gl) : void
		}

		class Camera {
			+Camera()
			+~Camera()
			+GetAngle() : float {query}
			+GetAspect() : float {query}
			+GetZFar() : float {query}
			+GetZNear() : float {query}
			-m_angle : float
			-m_aspect : float
			-m_zFar : float
			-m_zNear : float
			+GetProj() : glm::mat4 {query}
			+GetViewMatrix() : glm::mat4 {query}
			+GetViewProj() : glm::mat4 {query}
			-m_projMatrix : glm::mat4
			-m_viewMatrix : glm::mat4
			+GetAt() : glm::vec3 {query}
			+GetEye() : glm::vec3 {query}
			+GetWorldUp() : glm::vec3 {query}
			-m_at : glm::vec3
			-m_eye : glm::vec3
			-m_worldUp : glm::vec3
			+SetAngle(const float _angle) : void
			+SetAspect(const float _aspect) : void
			+SetProj(float _angle, float _aspect, float _zn, float _zf) : void
			+SetView(glm::vec3 _eye, glm::vec3 _at, glm::vec3 _up) : void
			+SetZFar(const float _zf) : void
			+SetZNear(const float _zn) : void
		}

		class CameraManipulator {
			+CameraManipulator()
			+~CameraManipulator()
			-m_pCamera : Camera*
			-m_backward_pressed : bool
			-m_down_pressed : bool
			-m_forward_pressed : bool
			-m_left_pressed : bool
			-m_right_pressed : bool
			-m_up_pressed : bool
			+GetSpeed() : float {query}
			-m_distance : float
			-m_goForward : float
			-m_goRight : float
			-m_goUp : float
			-m_speed : float
			-m_u : float
			-m_v : float
			-m_center : glm::vec3
			+KeyboardDown(const SDL_KeyboardEvent& key) : void
			+KeyboardUp(const SDL_KeyboardEvent& key) : void
			+MouseMove(const SDL_MouseMotionEvent& mouse) : void
			+MouseWheel(const SDL_MouseWheelEvent& wheel) : void
			+SetCamera(Camera* _pCamera) : void
			+SetSpeed(float _speed) : void
			+Update(float _deltaTime) : void
		}

		class CompShader {
			+CompShader(const std::filesystem::path& comp_filename, const std::vector<std::filesystem::path>& include_filenames, const std::map<std::string, std::string>& in_variables)
			+~CompShader()
			+ul(const GLchar* name) : GLint
			+GetProgramID() : GLuint
			-m_program_id : GLuint
			-{static} m_currently_used_id : static GLuint
			-ConfigureShader(const std::map<std::string, std::string>& in_variables) : std::string
			-LoadShader(const std::filesystem::path& comp_filename, const std::vector<std::filesystem::path>& include_filenames) : std::string
			-m_shader_source_code : std::string
			-AttachShader(const std::string& configured_shader_source_code) : void
			+Barrier(GLbitfield barriers) : void
			+Dispatch(unsigned x, unsigned y, unsigned z) : void
			+Recompile(const std::map<std::string, std::string>& in_variables) : void
			+Use() : void
		}

		class Framebuffer {
			+Framebuffer(unsigned width, unsigned height)
			+~Framebuffer()
			-m_framebuffer_id : GLuint
			-m_target_texture : Texture2D
			-m_height : unsigned
			-m_width : unsigned
			+Bind() : void
			+Blit() : void
			-FlipSDLSurface(SDL_Surface* surface) : void
			-Init() : void
			+Resize(unsigned width, unsigned height) : void
			+Screenshot(const std::filesystem::path& screenshot_path) : void
			+UnBind() : void
		}

		class Skybox {
			+Skybox()
			+~Skybox()
			+GetTextureID() : GLuint
			-m_texture_id : GLuint
		}

		class Texture2D {
			+Texture2D(unsigned width, unsigned height, GLenum format, unsigned levels)
			+~Texture2D()
			-m_format : GLenum
			+GetTextureID() : GLuint
			-m_texture_id : GLuint
			-m_height : unsigned
			-m_levels : unsigned
			-m_width : unsigned
			+Bind(GLuint unit, GLenum access, unsigned level) : void
			-Init() : void
			+Resize(unsigned width, unsigned height) : void
			+Resize(unsigned width, unsigned height, unsigned levels) : void
		}

		enum RenderModeType {
			DEBUG
			DEBUG_DEPTH
			DEBUG_ITERATION_COUNT
			ITERATION_COUNT
			NORMAL
			SDF_CALL_COUNT
		}

		enum SDFSceneType {
			CAR
			NEWTONS_CRADLE
			PRIMITIVES
			TEMPLE
		}

		enum SphereTracingType {
			ENHANCED
			NAIVE
			RELAXED
		}

		enum TracingType {
			CONE
			ENHANCED
			NAIVE
			RELAXED
		}
	}
}





/' Inheritance relationships '/




/' Aggregation relationships '/

szakdoga.core.App *-- szakdoga.core.Camera


szakdoga.core.App *-- szakdoga.core.CameraManipulator


szakdoga.core.App "4" *-- szakdoga.core.CompShader


szakdoga.core.App *-- szakdoga.core.Framebuffer


szakdoga.core.App *-- szakdoga.core.RenderModeType


szakdoga.core.App *-- szakdoga.core.SDFSceneType


szakdoga.core.App *-- szakdoga.core.Skybox


szakdoga.core.App "3" *-- szakdoga.core.SphereTracingType


szakdoga.core.App "3" *-- szakdoga.core.Texture2D


szakdoga.core.App *-- szakdoga.core.TracingType


szakdoga.core.CameraManipulator o-- szakdoga.core.Camera


szakdoga.core.Framebuffer *-- szakdoga.core.Texture2D






/' Nested objects '/



@enduml
